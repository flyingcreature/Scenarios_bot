import json
import logging

import telebot
from telebot.types import Message, ReplyKeyboardRemove

import db
from config import (ADMINS, LOGS_PATH, MAX_TOKENS_PER_SESSION, MAX_SESSIONS, MAX_USERS, MAX_MODEL_TOKENS, BOT_TOKEN,
                    TOKENS_DATA_PATH)
from gpt import ask_gpt_helper, count_tokens_in_dialogue, get_system_content
from utils import create_keyboard

# –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –ø–æ –ø—É—Ç–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å —É—Ä–æ–≤–Ω–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è debug
logging.basicConfig(
    filename=LOGS_PATH,
    level=logging.DEBUG,
    format="%(asctime)s %(message)s",
    filemode="w",
)

bot = telebot.TeleBot(BOT_TOKEN)

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –∏ —Ç–∞–±–ª–∏—á–∫—É –≤ –Ω–µ–π
db.create_db()
db.create_table()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
genre_list = [
    "–•–æ—Ä—Ä–æ—Ä",
    "–ö–æ–º–µ–¥–∏—è",
    "–ë–æ–µ–≤–∏–∫",
]
hero_list = [
    "–î–∞—Ä—Ç –í–µ–π–¥–µ—Ä",
    "–ê–¥–∞ –õ–∞–≤–ª–µ–π—Å",
    "–õ–µ–≥–∏–æ–Ω–µ—Ä",
    "–ê–Ω–Ω–∞ –ê—Ö–º–∞—Ç–æ–≤–∞"
]

end_list = [
    "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
    "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é"
]

setting_list = {
    "–í –≥–æ—Ä–∞—Ö": "–°–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ —Ñ–æ–Ω–µ –∫—Ä–∞—Å–∏–≤—ã—Ö –ø—Ä–∏—Ä–æ–¥–Ω—ã—Ö –ø–µ–π–∑–∞–∂–µ–π, "
               "–∞ –≥–µ—Ä–æ–∏ –±—É–¥—É—Ç —Å—Ç–∞–ª–∫–∏–≤–∞—Ç—å—Å—è —Å –æ–ø–∞—Å–Ω–æ—Å—Ç—è–º–∏ –∏ –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –≥–æ—Ä–Ω–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç—å—éüèîÔ∏è.",
    "–í –∫–æ—Å–º–æ—Å–µ": "–°–æ–±—ã—Ç–∏—è —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ó–µ–º–ª–∏. –ì–µ—Ä–æ–∏ –º–æ–≥—É—Ç —Å—Ç–∞–ª–∫–∏–≤–∞—Ç—å—Å—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –æ–ø–∞—Å–Ω–æ—Å—Ç—è–º–∏, "
                 "—Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º–∏ü™ê.",
    "–í –ì–¢–ê5": "–°–æ–±—ã—Ç–∏—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—é—Ç—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –º–∏—Ä–µ –∏–≥—Ä—ã, "
              "–∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Ç—Ä–∏ –∫—Ä—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–µ–±–æ–ª—å—à–∏—Ö –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤. "
              "–ì–ª–∞–≤–Ω—ã–µ –≥–µ—Ä–æ–∏ - —Ç—Ä–æ–µ –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—ã—Ç–∞—é—Ç—Å—è –Ω–∞–ª–∞–¥–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å, "
              "–Ω–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –Ω–æ–≤—ã–µ –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏. "
              "–í –∏–≥—Ä–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–≥—Ä–æ–º–Ω—ã–π –≤—ã–±–æ—Ä —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∏—Å—Å–∏–π, –∑–∞–¥–∞–Ω–∏–π –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π, "
              "–∞ —Ç–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –º–∏—Ä –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –µ–≥–æ –æ–±–∏—Ç–∞—Ç–µ–ª—è–º–∏ü§©."
}


@bot.message_handler(commands=["start"])
def start(message):
    user_name = message.from_user.first_name
    user_id = message.from_user.id

    if not db.is_user_in_db(user_id):  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –Ω–µ—Ç
        if len(db.get_all_users_data()) < MAX_USERS:  # –ï—Å–ª–∏ —á–∏—Å–ª–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–Ω—å—à–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ
            db.add_new_user(user_id)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        else:
            text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å—á–µ—Ä–ø–∞–Ω. –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:("

            bot.send_message(
                chat_id=user_id,
                text=text
            )
            return

    # –≠—Ç–æ—Ç –±–ª–æ–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç-—Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç, –∏ –º—ã –≤–º–µ—Å—Ç–µ –º–æ–∂–µ–º –ø—Ä–∏–¥—É–º–∞—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é üéá.\n\n"
        f"–¢—ã –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏, –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è,"
        f" –∏ —Å–µ—Ç—Ç–∏–Ω–≥(—ç—Ç–æ –º–µ—Å—Ç–æ –≥–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∏—Ç—Å–æ—Ä–∏—è üå≥ üåÜ üåë), "
        f"–ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å—ë, –∫–∞–∫ –µ—Å—Ç—å.\n"
        f"–ò–Ω–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–∞—é—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º–∏ - –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.\n\n"
        f"–ù—É —á—Ç–æ, –Ω–∞—á—ë–º?"
    )

    bot.send_message(
        chat_id=user_id,
        text=text,
        reply_markup=create_keyboard(["–ù–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é!"])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–æ—á–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    )
    # –ù–∞—Å–∏–ª—å–Ω–æ —É–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ –Ω–∞–∂–º–µ—Ç –ª–∏ –æ–Ω –∫–Ω–æ–ø–∫—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç
    # –∫–∞–∫–æ–µ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    bot.register_next_step_handler(message, choose_genre)


def filter_choose_genre(message: Message) -> bool:
    user_id = message.from_user.id
    if db.is_user_in_db(user_id):
        return message.text in ["–ù–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é!", "–ò–∑–º–µ–Ω–∏—Ç—å –∂–∞–Ω—Ä/–≥–µ—Ä–æ—è/—Å–µ—Ç—Ç–∏–Ω–≥", "–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é"]


@bot.message_handler(func=filter_choose_genre)
def choose_genre(message: Message):
    user_id = message.from_user.id
    sessions = db.get_user_data(user_id)["sessions"]  # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if sessions < MAX_SESSIONS:  # –ï—Å–ª–∏ —á–∏—Å–ª–æ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–æ –ø—Ä–µ–¥–µ–ª–∞
        db.update_row(user_id, "sessions", sessions + 1)  # –ù–∞–∫—Ä—É—á–∏–≤–∞–µ–º –µ–º—É +1 —Å–µ—Å—Å–∏—é
        db.update_row(user_id, "tokens", MAX_TOKENS_PER_SESSION)  # –ò –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Ç–æ–∫–µ–Ω—ã
        bot.send_message(
            chat_id=user_id,
            text="–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä üé≠, –¥–ª—è —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏:",
            reply_markup=create_keyboard(genre_list)
        )
        bot.register_next_step_handler(message, genre_selection)

    else:
        bot.send_message(
            chat_id=user_id,
            text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ª–∏–º–∏—Ç —Ç–≤–æ–∏—Ö –∏—Å—Ç–æ—Ä–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω:("
        )


def genre_selection(message: Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    user_choice = message.text  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä –∂–∞–Ω—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_choice in genre_list:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.update_row(user_id, "genre", user_choice)
        bot.send_message(
            chat_id=user_id,
            text=(
                f"–û—Ç–ª–∏—á–Ω–æ, {user_name}, –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å —Å –∂–∞–Ω—Ä–æ–º '{user_choice}'!"
                f"–î–∞–≤–∞–π —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è ü¶∏‚Äç‚ôÇÔ∏è.")
            ,
            reply_markup=create_keyboard(hero_list)
        )
        bot.register_next_step_handler(message, hero_selection)

    else:  # –ï—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞
        bot.send_message(
            chat_id=user_id,
            text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ –∂–∞–Ω—Ä–∞ –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ –º–µ–Ω—é.",
            reply_markup=create_keyboard(genre_list),
        )
        bot.register_next_step_handler(message, genre_selection)


def hero_selection(message: Message):  # –í—Å—ë —Ç–æ –∂–µ —Å–∞–º–æ–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–µ—Ä–æ—è.
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    user_choice = message.text
    if user_choice in hero_list:
        db.update_row(user_id, "hero", user_choice)

        bot.send_message(
            chat_id=user_id,
            text=(
                f"–ü—Ä–∏–Ω—è—Ç–æ, {user_name}! –í –≥–ª–∞–≤–Ω–æ–π —Ä–æ–ª–∏ –±—É–¥–µ—Ç: '{user_choice}'. "
                f"–î–∞–≤–∞–π —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ–º —Å–µ—Ç—Ç–∏–Ω–≥."
            ),
        )
        text = (
            "–í –∫–∞–∫–æ–π —Å–µ—Ç—Ç–∏–Ω–≥ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–º–µ—Å—Ç–∏—Ç—å –≥–µ—Ä–æ—è:\n\n"
        )
        for setting in setting_list:
            text += f"{setting}: {setting_list[setting]}\n\n"

        bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=create_keyboard(list(setting_list.keys())),
        )
        bot.register_next_step_handler(message, setting_selection)

    else:
        bot.send_message(
            chat_id=user_id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–µ—Ç—Ç–∏–Ω–≥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
            reply_markup=create_keyboard(list(setting_list.keys())),
        )
        bot.register_next_step_handler(message, hero_selection)


def setting_selection(message: Message):  # –í—Å—ë —Ç–æ –∂–µ —Å–∞–º–æ–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ç—Ç–∏–Ω–≥–∞.
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    user_choice = message.text
    if user_choice in setting_list:
        db.update_row(user_id, "setting", setting_list[user_choice])
        bot.send_message(
            chat_id=user_id,
            text=(
                f"–ü—Ä–∏–Ω—è—Ç–æ, {user_name}! –î–µ–π—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ '{user_choice}'. "
                f"–¢–µ–±–µ –µ—Å—Ç—å, —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å?"
            ),
            reply_markup=create_keyboard([
                "–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ",
                "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å  –∏—Å—Ç–æ—Ä–∏—é"
            ]
            )
        )

    else:
        bot.send_message(
            chat_id=user_id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–µ—Ç—Ç–∏–Ω–≥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
            reply_markup=create_keyboard(list(setting_list.keys())),
        )
        bot.register_next_step_handler(message, setting_selection)


def filter_additionally(message: Message) -> bool:
    user_id = message.from_user.id
    if db.is_user_in_db(user_id):
        return message.text == "–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ"


@bot.message_handler(func=filter_additionally)  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —ç—Ç–æ—Ç –±–ª–æ–∫
def write_additionally(message: Message):
    user_id = message.from_user.id

    bot.send_message(
        chat_id=user_id,
        text="–ù–∞–ø–∏—à–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è‚úçÔ∏è:"
    )
    bot.register_next_step_handler(message, additionally_selection)


def additionally_selection(message: Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    selection = message.text

    db.update_row(user_id, "additionally", selection)
    bot.send_message(
        chat_id=user_id,
        text=(
            f"–ü—Ä–∏–Ω—è—Ç–æ, {user_name}! –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ: '{selection}'. "
            f"–ê —Ç–µ–ø–µ—Ä—å –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É  '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é'"
        ),
        reply_markup=create_keyboard([
            "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é"
        ]
        )
    )

    user_data = db.get_user_data(int(user_id))
    messages = user_data["messages"]

    if messages is None:
        bot.register_next_step_handler(message, create_a_story)
    else:
        bot.register_next_step_handler(message, continue_explaining)


def filter_create_a_story(message: Message) -> bool:
    user_id = message.from_user.id
    if db.is_user_in_db(user_id):
        return message.text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é"


# –ë–ª–æ–∫ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á
@bot.message_handler(func=filter_create_a_story)
def create_a_story(message: Message):
    user_id = message.from_user.id
    user_tokens = db.get_user_data(user_id)["tokens"]  # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    genre = db.get_user_data(user_id)["genre"]  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∂–∞–Ω—Ä –∏–∑ –ë–î
    hero = db.get_user_data(user_id)["hero"]  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–µ—Ä–æ—è –∏–∑ –ë–î
    setting = db.get_user_data(user_id)["setting"]  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç—Ç–∏–Ω–≥ –∏–∑ –ë–î
    additionally = db.get_user_data(user_id)["additionally"]  # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –ë–î

    db.update_row(user_id, "messages", None)  # –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –ë–î

    system_content = get_system_content(genre, hero, setting)  # –§–æ—Ä–º–∏—Ä—É–µ–º system_content

    messages = [
        {"role": "system", "content": system_content}
    ]  # –ü—Ä–∏–≤–æ–¥–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤–∏–¥—É - —Å–ø–∏—Å–∫—É –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π

    if additionally is not None:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
        content = (
            f"–¢–∞–∫–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—Ä–æ—Å–∏–ª —É—á–µ—Å—Ç—å "
            f"—Å–ª–µ–¥—É—é—â—É—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {additionally}"
        )
        messages.append({"role": "system", "content": content})

    tokens_messages = count_tokens_in_dialogue(messages)  # –ü–æ—Å—á–∏—Ç–∞–µ–º –≤–µ—Å –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ç–æ–∫–µ–Ω–∞—Ö

    if tokens_messages + MAX_MODEL_TOKENS <= user_tokens:  # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –≤–µ—Å –∑–∞–ø—Ä–æ—Å–∞ + –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω—å—à–µ, —á–µ–º
        # –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ö–≤–∞—Ç–∏–ª–æ –∏ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        bot.send_message(
            chat_id=user_id,
            text="–ì–µ–Ω–µ—Ä–∏—Ä—É—é..."
        )
        answer = ask_gpt_helper(messages)  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
        messages.append({"role": "assistant", "content": answer})  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—à —Å–ª–æ–≤–∞—Ä–∏–∫ –æ—Ç–≤–µ—Ç GPT

        user_tokens -= count_tokens_in_dialogue([{"role": "assistant", "content": answer}])  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        # –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≤—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
        db.update_row(user_id, "tokens", user_tokens)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ë–î

        json_string = json.dumps(messages, ensure_ascii=False)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π –∫ –≤–∏–¥—É json
        # —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–π —è—á–µ–π–∫–µ –ë–î
        db.update_row(user_id, "messages", json_string)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—É—á–∏–≤—à—É—é—Å—è —Å—Ç—Ä–æ–∫—É —Å–æ –≤—Å–µ–º–∏
        # —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —è—á–µ–π–∫—É 'messages'

        if answer is None:
            bot.send_message(
                chat_id=user_id,
                text="–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT :(",
                reply_markup=create_keyboard(
                    [
                        "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                        "–ò–∑–º–µ–Ω–∏—Ç—å –∂–∞–Ω—Ä/–≥–µ—Ä–æ—è/—Å–µ—Ç—Ç–∏–Ω–≥",
                    ]
                ),
            )
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message.text}\n–ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞: –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT")
        elif answer == "":
            bot.send_message(
                chat_id=user_id,
                text="–ù–µ –º–æ–≥—É —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ :(",
                reply_markup=create_keyboard(
                    [
                        "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                        "–ò–∑–º–µ–Ω–∏—Ç—å –∂–∞–Ω—Ä/–≥–µ—Ä–æ—è/—Å–µ—Ç—Ç–∏–Ω–≥",
                    ]
                ),
            )
            logging.info(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message.text}\n–ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞: –Ω–µ–π—Ä–æ—Å–µ—Ç—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É"
            )
        else:
            bot.send_message(
                chat_id=user_id,
                text=answer,
                reply_markup=create_keyboard(
                    [
                        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                        "–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ",
                        "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
                    ]
                ),
            )

    else:  # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å + –æ—Ç–≤–µ—Ç
        bot.send_message(
            chat_id=user_id,
            text="–¢–æ–∫–µ–Ω–æ–≤ –Ω–∞ –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –Ω–µ —Ö–≤–∞—Ç–∏—Ç—å:( –ù–∞—á–Ω–∏ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é, –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏ –∏—Å—Ç–æ—Ä–∏—é.",
            reply_markup=create_keyboard(
                [
                    "–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é",
                    "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                    "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é"
                ]
            )
        )
        logging.info(
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message.text}\n–ü–æ–ª—É—á–µ–Ω–æ: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ —Ç–æ–∫–µ–Ω–æ–≤"
        )
        if message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
            bot.register_next_step_handler(message, send_end_story)


def filter_continue_explaining(message: Message) -> bool:
    user_id = message.from_user.id
    if db.is_user_in_db(user_id):
        return message.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"


@bot.message_handler(func=filter_continue_explaining)
def continue_explaining(message):
    user_id = message.from_user.id
    json_string_messages = db.get_user_data(user_id)["messages"]  # –î–æ—Å—Ç–∞–µ–º –∏–∑ –±–∞–∑—ã –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    # –≤ –≤–∏–¥–µ json-—Å—Ç—Ä–æ–∫–∏
    messages = json.loads(json_string_messages)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º json-—Å—Ç—Ä–æ–∫—É –≤ –Ω—É–∂–Ω—ã–π –Ω–∞–º —Ñ–æ—Ä–º–∞—Ç —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π
    if not messages:  # –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–æ –∑–∞–ø—Ä–æ—Å–∞ –µ—â–µ –Ω–µ –±—ã–ª–æ
        bot.send_message(
            chat_id=user_id,
            text="–¢—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª –∏—Å—Ç–æ—Ä–∏–π, —Å–¥–µ–ª–∞–π —ç—Ç–æ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
            reply_markup=create_keyboard(["–ù–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é!"]),
        )
        return
    user_content = "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é."  # –§–æ—Ä–º–∏—Ä—É–µ–º user_content

    messages.append({"role": "user", "content": user_content})  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user_tokens = db.get_user_data(user_id)["tokens"]  # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tokens_messages = count_tokens_in_dialogue(messages)  # –°—á–∏—Ç–∞–µ–º –≤–µ—Å –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ç–æ–∫–µ–Ω–∞—Ö –∏–∑ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    if tokens_messages + MAX_MODEL_TOKENS <= user_tokens:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å + –æ—Ç–≤–µ—Ç
        bot.send_message(
            chat_id=user_id,
            text="–§–æ—Ä–º—É–ª–∏—Ä—É—é –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ..."
        )
        answer = ask_gpt_helper(messages)  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ—Ç gpt
        messages.append({"role": "assistant", "content": answer})  # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ–π –æ—Ç–≤–µ—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π

        user_tokens -= count_tokens_in_dialogue([{"role": "assistant", "content": answer}])  # –í—ã—á–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω—ã
        db.update_row(user_id, "tokens", user_tokens)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ë–î

        json_string_messages = json.dumps(messages, ensure_ascii=False)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ë–î
        db.update_row(user_id, "messages", json_string_messages)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î

        if answer is None:
            bot.send_message(
                chat_id=user_id,
                text="–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT :(",
                reply_markup=create_keyboard(
                    [
                        "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                        "–ò–∑–º–µ–Ω–∏—Ç—å –∂–∞–Ω—Ä/–≥–µ—Ä–æ—è/—Å–µ—Ç—Ç–∏–Ω–≥",
                    ]
                ),
            )
        elif answer == "":
            bot.send_message(
                chat_id=user_id,
                text="–ò—Å—Ç–æ—Ä–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞ ^-^",
                reply_markup=create_keyboard(
                    [
                        "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                        "–ò–∑–º–µ–Ω–∏—Ç—å –∂–∞–Ω—Ä/–≥–µ—Ä–æ—è/—Å–µ—Ç—Ç–∏–Ω–≥",
                    ]
                ),
            )
        else:
            bot.send_message(
                chat_id=user_id,
                text=answer,
                reply_markup=create_keyboard(
                    [
                        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                        "–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ",
                        "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
                    ]
                ),
            )
    else:  # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ
        user_id = message.from_user.id
        bot.send_message(
            chat_id=user_id,
            text="–¢–æ–∫–µ–Ω–æ–≤ –Ω–∞ –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –Ω–µ —Ö–≤–∞—Ç–∏—Ç—å:( –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π  —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é.",
            reply_markup=create_keyboard(["–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é", "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"]),
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—Å–∏–∏
        )
        logging.info(
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message.text}\n–ü–æ–ª—É—á–µ–Ω–æ: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ —Ç–æ–∫–µ–Ω–æ–≤"
        )

        if message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
            bot.register_next_step_handler(message, send_end_story)


def filter_end_story(message: Message) -> bool:
    user_id = message.from_user.id
    if db.is_user_in_db(user_id):
        return message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"


@bot.message_handler(func=filter_end_story)
def send_end_story(message: Message):
    user_id = message.from_user.id
    json_string_messages = db.get_user_data(user_id)["messages"]  # –î–æ—Å—Ç–∞–µ–º –∏–∑ –±–∞–∑—ã –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    # –≤ –≤–∏–¥–µ json-—Å—Ç—Ä–æ–∫–∏
    messages = json.loads(json_string_messages)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º json-—Å—Ç—Ä–æ–∫—É –≤ –Ω—É–∂–Ω—ã–π –Ω–∞–º —Ñ–æ—Ä–º–∞—Ç —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π
    if not messages:  # –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –∑–∞–∫–æ–Ω—á–∏—Ç—å, –Ω–æ –∑–∞–ø—Ä–æ—Å–∞ –µ—â–µ –Ω–µ –±—ã–ª–æ
        bot.send_message(
            chat_id=user_id,
            text="–¢—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª –∏—Å—Ç–æ—Ä–∏–π, —Å–¥–µ–ª–∞–π —ç—Ç–æ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
            reply_markup=create_keyboard(["–ù–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é!"]),
        )
        return

    user_content = (
        "–ù–∞–ø–∏—à–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ c –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π —Ä–∞–∑–≤—è–∑–∫–æ–π. "
        "–ù–µ –ø–∏—à–∏ –Ω–∏–∫–∞–∫–æ–π –ø–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç —Å–µ–±—è."
    )  # –§–æ—Ä–º–∏—Ä—É–µ–º user_content

    messages.append({"role": "user", "content": user_content})  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤—Ç–∞–µ–ª—è

    user_tokens = db.get_user_data(user_id)["tokens"]  # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tokens_messages = count_tokens_in_dialogue(messages)  # –°—á–∏—Ç–∞–µ–º –≤–µ—Å –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ç–æ–∫–µ–Ω–∞—Ö –∏–∑ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    required_tokens = (tokens_messages + MAX_MODEL_TOKENS) - user_tokens
    end_tokens = user_tokens + required_tokens
    db.update_row(user_id, "tokens", end_tokens)

    bot.send_message(
        chat_id=user_id,
        text="–§–æ—Ä–º—É–ª–∏—Ä—É—é –∫–æ–Ω—Ü–æ–≤–∫—É..."
    )
    answer = ask_gpt_helper(messages)  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ü–æ–≤–∫—É –æ—Ç gpt
    messages.append({"role": "assistant", "content": answer})  # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ–π –æ—Ç–≤–µ—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π

    user_tokens -= count_tokens_in_dialogue([{"role": "assistant", "content": answer}])  # –í—ã—á–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    db.update_row(user_id, "tokens", user_tokens)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ë–î

    json_string_messages = json.dumps(messages, ensure_ascii=False)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ë–î
    db.update_row(user_id, "messages", json_string_messages)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î

    if answer is None:
        bot.send_message(
            chat_id=user_id,
            text="–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT :(",
            reply_markup=create_keyboard(
                [
                    "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                    "–ò–∑–º–µ–Ω–∏—Ç—å –∂–∞–Ω—Ä/–≥–µ—Ä–æ—è/—Å–µ—Ç—Ç–∏–Ω–≥",
                ]
            ),
        )
    elif answer == "":
        bot.send_message(
            chat_id=user_id,
            text="–ò—Å—Ç–æ—Ä–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞ ^-^",
            reply_markup=create_keyboard(
                [
                    "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                    "–ò–∑–º–µ–Ω–∏—Ç—å –∂–∞–Ω—Ä/–≥–µ—Ä–æ—è/—Å–µ—Ç—Ç–∏–Ω–≥",
                ]
            ),
        )
    else:
        bot.send_message(
            chat_id=user_id,
            text=answer,
            reply_markup=create_keyboard(
                [
                    "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                    "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é",

                ]
            ),
        )


def filter_all_story(message: Message) -> bool:
    user_id = message.from_user.id
    if db.is_user_in_db(user_id):
        return message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é"


@bot.message_handler(func=filter_all_story)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
def send_all_story(message: Message):
    user_id = message.from_user.id
    json_string_messages = db.get_user_data(user_id)["messages"]  # –î–æ—Å—Ç–∞–µ–º –∏–∑ –±–∞–∑—ã –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    # –≤ –≤–∏–¥–µ json-—Å—Ç—Ä–æ–∫–∏
    messages = json.loads(json_string_messages)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º json-—Å—Ç—Ä–æ–∫—É –≤ –Ω—É–∂–Ω—ã–π –Ω–∞–º —Ñ–æ—Ä–º–∞—Ç —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π
    if not messages:  # –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é, –Ω–æ –∑–∞–ø—Ä–æ—Å–∞ –µ—â–µ –Ω–µ –±—ã–ª–æ
        bot.send_message(
            chat_id=user_id,
            text="–¢—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª –∏—Å—Ç–æ—Ä–∏–π, —Å–¥–µ–ª–∞–π —ç—Ç–æ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
            reply_markup=create_keyboard(["–ù–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é!"]),
        )
        return

    all_story = ""
    for message in messages:
        if message["role"] == "assistant":
            all_story += message["content"]

    bot.send_message(
        chat_id=user_id,
        text=all_story,
        reply_markup=create_keyboard(
            [
                "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                "–ò–∑–º–µ–Ω–∏—Ç—å –∂–∞–Ω—Ä/–≥–µ—Ä–æ—è/—Å–µ—Ç—Ç–∏–Ω–≥",
            ]
        )
    )


@bot.message_handler(commands=["kill_my_session"])
def kill_session(message: Message):
    user_id = message.from_user.id
    if user_id in ADMINS:
        try:
            db.update_row(user_id, "sessions", 1)

        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}, —Å–µ—Å—Å–∏–∏ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}, —Å–µ—Å—Å–∏–∏ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    else:
        print(f"{user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏–∏")
        logging.info(f"{user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏–∏")


@bot.message_handler(commands=["how_many_tokens"])
def how_many_tokens(message: Message):
    user_id = message.from_user.id
    if user_id in ADMINS:
        try:
            with open(TOKENS_DATA_PATH, "r") as f:
                tokens_count = json.load(f)["tokens_count"]

            bot.send_message(
                chat_id=user_id,
                text=f"–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ:{tokens_count} —Ç–æ–∫–µ–Ω–æ–≤."
            )
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}, —Ç–æ–∫–µ–Ω—ã –Ω–µ –≤—ã–≤–µ–¥–µ–Ω—ã.")
            logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}, —Ç–æ–∫–µ–Ω—ã –Ω–µ –≤—ã–≤–µ–¥–µ–Ω—ã.")
    else:
        print(f"{user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ.")
        logging.info(f"{user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ.")


@bot.message_handler(commands=["all_tokens"])
def send_tokens(message: Message):  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
    user_id = message.from_user.id
    user_tokens = db.get_user_data(user_id)["tokens"]

    bot.send_message(
        chat_id=user_id,
        text=f"–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {user_tokens} —Ç–æ–∫–µ–Ω–æ–≤."
    )


@bot.message_handler(commands=['debug'])
def send_logs(message):
    user_id = message.from_user.id
    if user_id in ADMINS:
        try:
            with open(LOGS_PATH, "rb") as f:
                bot.send_document(
                    message.chat.id,
                    f
                )
        except telebot.apihelper.ApiTelegramException:
            bot.send_message(
                chat_id=message.chat.id,
                text="–õ–æ–≥–æ–≤ –Ω–µ—Ç!"
            )
    else:
        print(f"{user_id} –∑–∞—Ö–æ—Ç–µ–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏")
        logging.info(f"{user_id} –∑–∞—Ö–æ—Ç–µ–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏")


@bot.message_handler(commands=['help'])
def help_command(message: Message):
    text = (
        "üëã –Ø —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫.\n\n"
        "–ß—Ç–æ –±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π gpt –ø–æ–º–æ—â–Ω–∏–∫–∞ üïµ‚Äç‚ôÄÔ∏è —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞ .\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω –Ω–∞ –±–∞–∑–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ YandexGPT Lite. \n"
        "–≠—Ç–æ –º–æ–π –ø–µ—Ä–≤—ã–π –æ–ø—ã—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å gpt, "
        "–ø–æ—ç—Ç–æ–º—É –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –ü—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏ –º–Ω–µ –æ–± —ç—Ç–æ–º)\n"
        "–ò —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –µ—ë —Ä–µ—à–∏—Ç—å."
    )
    bot.send_message(
        chat_id=message.chat.id,
        text=text,
        reply_markup=ReplyKeyboardRemove()
    )


def filter_hello(message):
    word = "–ø—Ä–∏–≤–µ—Ç"
    return word in message.text.lower()


@bot.message_handler(content_types=['text'], func=filter_hello)
def say_hello(message: Message):
    user_name = message.from_user.first_name
    bot.send_message(
        chat_id=message.chat.id,
        text=f"{user_name}, –ø—Ä–∏–≤–µ—Ç–∏–∫–∏ üëã!"
    )


def filter_bye(message):
    word = "–ø–æ–∫–∞"
    return word in message.text.lower()


@bot.message_handler(content_types=["text"], func=filter_bye)
def say_bye(message: Message):
    bot.send_message(
        chat_id=message.chat.id,
        text="–ü–æ–∫–∞, –∑–∞—Ö–æ–¥–∏ –µ—â—ë!"
    )


@bot.message_handler(func=lambda message: True, content_types=['audio', 'photo', 'voice', 'video', 'document',
                                                               'text', 'location', 'contact', 'sticker'])
def send_echo(message: Message):
    text = (
        f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ ({message.text}).\n"
        f"–ù–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ªüòî, –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.ü§ó"
    )
    bot.send_message(
        chat_id=message.chat.id,
        text=text
    )


logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
bot.infinity_polling(timeout=60, long_polling_timeout=5)
